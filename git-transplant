#!/bin/sh
#
# git-transplant: transplant a branch upon other branch.
#
#
set -e

cat <<\EOF >/dev/null
git-transplant is mainly used to solve following situation.

The development branches:

       o---o---o---o---o master
            \     /
             o---o  vendor


will be rewritten with author/commitor info masked off, to publish branches:

       o'--o'--o'--o'--o' master'
            \     /
             o'--o'  vendor'

The question is, when development branches grow :

       o---o---o---o---o---A---B master
            \     /       /
             o---o---C---D  vendor
                  \     /
                   E---F

how to transplant them to the publish branches:

       o'--o'--o'--o'--o'--A'--B' master'
            \     /       /
             o'--o'--C'--D' vendor'
                  \     /
                   E'--F'


1. Cache tree->commit' first,
CACHE = {}
for REV in rev_list(..master'):
  TREE = REV^{tree}
  CACHE[TREE] = REV

2. Transplant master to master'
WATCH_BRANCHES = { master^{commit} : "master",
                  vendor^{commit} : "vendor" }
TIP = {}
for REV in (..master):
  # REV is in order of ... o C E F D A B
  TREE = REV^{tree}
  PARENTS = REV^{parents}
  PARENTS' = [ CACHE[c^{tree}] for c in PARENTS ]
  COMMIT' = commit(TREE, PARENT', filter_message(REV^{message}))
  CACHE[TREE] = COMMIT'
  if REV in WATCH_BRANCHES:
    TIP[WATCH_BRANCHES[REV]] = COMMIT'

3. Update ref
  for BRANCH in TIP:
    update_ref(BRANCH', TIP[BRANCH])

EOF

if [ $# -eq 0 ]; then
    set -- -h
fi
OPTS_SPEC="\
git transplant <original branch> <transplanted branch>
--
h,help        show the help
q             quiet
d             show debug messages
author=       in 'user <email>' form, override the commit/author
"
eval "$(echo "$OPTS_SPEC" | git rev-parse --parseopt -- "$@" || echo exit $?)"

PATH=$PATH:$(git --exec-path)
. git-sh-setup

require_work_tree

quiet=
branch=
debug=
force_author=


debug()
{
	if [ -n "$debug" ]; then
		echo "$@" >&2
	fi
}

say()
{
	if [ -z "$quiet" ]; then
		echo "$@" >&2
	fi
}

assert()
{
	if "$@"; then
		:
	else
		die "assertion failed: " "$@"
	fi
}


#echo "Options: $*"

while [ $# -gt 0 ]; do
	opt="$1"
	shift
	case "$opt" in
		-q) quiet=1 ;;
		-d) debug=1 ;;
        --author) force_author="$1";
                  author_name="$(echo "$force_author" | sed -e 's/^ *//' -e 's/ *<.*$//')"
                  author_email="$(echo "$force_author" | sed -e 's/^.*<//' -e 's/>.*$//')"
                  [ -n "$author_name" -a -n "$author_email" ] || die "invalid --author $force_author"
                  debug "override author info: $author_name <$author_email>"
                  shift ;;
		--) break ;;
		*) die "Unexpected option: $opt" ;;
	esac
done

orig_branch="$1"
tran_branch="$2"

[ -n "$orig_branch" -a -n "$tran_branch" ] || die "You must provide original and transplanted branch"

debug "quiet: {$quiet}"
debug "orig_branch: {$orig_branch}"
debug "tran_branch: {$tran_branch}"


cache_setup()
{
	cachedir="$GIT_DIR/tran-cache/$tran_branch"
    [ -d $cachedir ] || mkdir -p $cachedir || die "Can't create cachedir: $cachedir"
	debug "Using cachedir: $cachedir"
}

cache_get()
{
    local tree
	for tree in $*; do
		[ -r "$cachedir/$tree" ] && cat "$cachedir/$tree"
	done
}

cache_set()
{
    local tree tran_rev
	tree="$1"
	tran_rev="$2"
	[ -e "$cachedir/$tree" ] && die "cache for $tree already exists!"
	echo "$tran_rev" >"$cachedir/$tree"
}

cache_get2()
{
	[ -r "$cachedir/$1" ] && cat "$cachedir/$1" || :
}

cache_set2()
{
	echo "$2" >"$cachedir/$1"
}

prefixed_with()
{
    local prefix="$1" word result
    shift
    for word in "$@"; do
        echo "${prefix}${word}"
    done
}

rev_exists()
{
	if git rev-parse "$1" >/dev/null 2>&1; then
		return 0
	else
		return 1
	fi
}

get_rev_tree()
{
    local rev tree
	for rev in $*; do
        tree=$(git rev-parse $rev^{tree}) || die "rev $rev has no tree"
		echo $tree
	done
}

rev_is_descendant_of_branch()
{
    local newrev branch branch_hash match
	newrev="$1"
	branch="$2"
	branch_hash=$(git rev-parse $branch)
	match=$(git rev-list -1 $branch_hash ^$newrev)

	if [ -z "$match" ]; then
		return 0
	else
		return 1
	fi
}

copy_commit()
{
	# We're going to set some environment vars here, so
	# do it in a subshell to get rid of them safely later
	debug copy_commit "{$1}" "{$2}" "{$3}"
	git log -1 --pretty=format:'%an%n%ae%n%ad%n%cn%n%ce%n%cd%n%B' "$1" |
	(
		read GIT_AUTHOR_NAME
		read GIT_AUTHOR_EMAIL
		read GIT_AUTHOR_DATE
		read GIT_COMMITTER_NAME
		read GIT_COMMITTER_EMAIL
		read GIT_COMMITTER_DATE
        if [ -n "$force_author" ]; then
            GIT_AUTHOR_NAME="$author_name"
            GIT_AUTHOR_EMAIL="$author_email"
            GIT_COMMITTER_NAME="$author_name"
            GIT_COMMITTER_EMAIL="$author_email"
        fi
		export  GIT_AUTHOR_NAME \
			GIT_AUTHOR_EMAIL \
			GIT_AUTHOR_DATE \
			GIT_COMMITTER_NAME \
			GIT_COMMITTER_EMAIL \
			GIT_COMMITTER_DATE
        (
            if [ -n "$force_author" ]; then
                cat | sed "s~: .\+<[^>]\+>~: $CORRECT_NAME <$CORRECT_EMAIL>~g"
            else
		        cat
            fi
        ) |  git commit-tree "$2" $3  # reads the rest of stdin
	) || die "Can't copy commit $1"
}

ensure_clean()
{
	if ! git diff-index HEAD --exit-code --quiet 2>&1; then
		die "Working tree has modifications.  Cannot add."
	fi
	if ! git diff-index --cached HEAD --exit-code --quiet 2>&1; then
		die "Index has modifications.  Cannot add."
	fi
}

cmd_transplant()
{
    cache_setup

    say "Cache branch $tran_branch ..."
    tran_latest="$(cache_get2 tran_latest)"
    git rev-list --topo-order --reverse $tran_branch \
        $(prefixed_with "^" $tran_latest) |
        while read rev; do
            tree=$(get_rev_tree $rev)
            debug "  cache: $tree -> $rev"
            cache_set $tree $rev
            [ -z "$tran_latest" ] && cache_set2 tran_latest $rev
        done

    say "Transplant $orig_branch upon $tran_branch"
    orig_latest="$(cache_get2 orig_latest)"
    git rev-list --topo-order --reverse --parents $orig_branch \
        $(prefixed_with "^" $orig_latest) |
        while read rev parents; do
            debug "Processing commit: $rev"

            # a. find tree not transplanted
            tree=$(get_rev_tree $rev)
		    debug "  tree is: $tree"
		    tran_rev=$(cache_get $tree)
		    if [ -n "$tran_rev" ]; then
			    debug "  prior: $tran_rev"
			    continue
		    fi

            # b. map parents to ones transplanted
		    debug "  parents: $parents"
            tran_parents=$(prefixed_with "-p " $(cache_get $(get_rev_tree $parents)))
		    debug "  tran_parents: $tran_parents"

            # c. copy commit
		    newrev=$(copy_commit "$rev" "$tree" "$tran_parents") || exit $?
	        debug "  newrev is: $newrev"

            # d. update state
	        cache_set $tree $newrev
	        cache_set2 orig_latest $rev
	        cache_set2 tran_latest $newrev
        done || exit $?
    tran_latest="$(cache_get2 tran_latest)"
	if [ "$tran_latest" = "$(git rev-parse $tran_branch)" ]; then
		die "No new revisions were found"
	fi
	if rev_exists "refs/heads/$tran_branch"; then
		if ! rev_is_descendant_of_branch $tran_latest $tran_branch; then
			die "Branch '$tran_branch' is not an ancestor of commit '$tran_latest'."
		fi
		action='Updated'
		git update-ref -m "transplant" "refs/heads/$tran_branch" $tran_latest || exit $?
		say "$action branch '$tran_branch'"
	fi
	echo $latest_tran
	exit 0
}

cmd_transplant
